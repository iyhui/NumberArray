#include<iostream>

using namespace std;


class Numbers {
private:
	int array[1000];
	float sum;
	float avg;


public:
  int generateArray();
  void display();
	float getSum();
	float getAverage();
	void Sort();
	int binarySearch(float x);
};
//1. method to generate 1000 random values 
int Numbers::generateArray(){
  for (int i = 0; i<1000; i++){
        array[i] = rand() % 100 + 1;
    } 
}

//2. Prints values generated by previous method
void Numbers::display(){
 cout << "\nThe 1000 random values generated are: " << endl;
  generateArray();
  for (int i = 0; i < 1000; i++){
        cout << array[i] << " ";
    } 
}

//3.method to sum all numbers in array
float Numbers::getSum(){
	for (int i = 0;i < 1000;i++){
    sum = sum + array[i];
	}
	
	return sum;
}
//4.method to average all numbers in array
float Numbers::getAverage(){
	return sum / 1000;
}
//5. method to sort
void Numbers::Sort(){
  int i, j;
  float temp;
  for(i=0; i<1000; i++){
    for (j=i+1; j<1000; j++){
      //Comparing elements
      if (array[i] > array[j]){
        //Swapping elements
        temp = array[j];
        array[j] = array[i];
        array[i] = temp;
      }
    }
  }
}
//6.search method
int Numbers::binarySearch(float x){
  int low = 0, high=999, mid;
  //import sorted array
  Sort();
  while (low <= high){
  //Finding mid index
  mid = (low + high)/2;
  //Comparing element
  if (x == array[mid])
    return mid;
  else if (x < array[mid])
    high = mid - 1;
  else
    low = mid + 1;
  }
 return -1;
}



int main(){
  int search_var;
  int index;
  int n;
	
	Numbers a;
	a.generateArray();
	a.display();
  cout << "\n\nThe sum of random array: "<< a.getSum() << endl;
	cout<<"\nThe average is "<<a.getAverage()<<endl;
  //search
  cout<<"\nEnter number you want to search:";
  cin>>search_var;

  //Applying binary search
index = a.binarySearch(search_var);

    //Checking index value
    if(index == -1)
    {
        cout << "\n Element not found... \n";
    }
    else
    {
        cout << "\n Element " << search_var << " found at " << index << " index position... \n";
    }

	return 0;
}

