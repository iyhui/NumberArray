#include<iostream>
#include <ctime>
#include<cstdlib>

using namespace std;

class Numbers {

  private:
    float array[1000];
    float sum;
    float avg;
    bool check;
  public:
    int generateArray();
    void setCheck(bool val);
    bool isEmpty();
    void display();
    void bubbleSort();
    void insertionSort();
    int binarySearch(float x);
    int linearSearch(int x);
    float getAverage();
    float getSum();
};

//1. method to generate 1000 random values

int Numbers::generateArray(){
  check = false; // check value set to false
  for(int i = 0; i < 1000; i++){
    array[i] = rand() % 1000 + 1;
  }
}

// function to set check as true when a new object is created in main function when
void Numbers::setCheck(bool val){
  check = val;
}

// helper function to return whether array was filled or not
bool Numbers::isEmpty(){
  return check;
}

//2. Prints values generated by previous method

void Numbers::display(){
  cout << "\nThe 1000 random values generated are: " << endl;
  cout <<endl;
  generateArray();
  for (int i = 0; i < 1000; i++){
    cout << array[i] << " ";
  }

}


//method to sum all numbers in array

float Numbers::getSum(){
  sum = 0.0;
  for (int i = 0;i < 1000; i++){
    sum = sum + array[i];
  }
  return sum;
}

//4a.method to average all numbers

float Numbers::getAverage(){
  return getSum() / 1000;
}

//5. method to sort

void Numbers::bubbleSort(){
  int i, j;
  float temp;
  for(i=0; i<1000; i++){
    for (j=i+1; j<1000-i; j++){

      //Comparing elements
      if (array[i] > array[j]){
        //Swapping elements
        temp = array[j];
        array[j] = array[i];
        array[i] = temp;
      }
    }
  }
}

//6. method for insertionSort

void Numbers::insertionSort(){
  generateArray();
  int i, key, j;
  for (i = 1; i < 1000; i++){
    key = array[i];
    j = i-1;
    while (j >= 0 && array[j] > key){
      array[j+1] = array[j];
      j = j-1;
    }

  array[j+1] = key;

  }
}

//7.search method - binarySearch
int Numbers::binarySearch(float x){
  //import sorted array
  bubbleSort();
  //insertionSort();
  int low = 0, high=19999, mid;
  while (low <= high){
  //Finding mid index
    mid = (low + high)/2;
    //Comparing element
    if (x == array[mid])
    return mid;
    else if (x < array[mid])
    high = mid - 1;
    else
    low = mid + 1;
  }
  return -1;
}

void printmenu();
void endPrint();
void defaultPrint();

int main(){

  int search_var;
  int index;
  int n;
  int menuChoice;

  Numbers a;
  // set value true so when other methods run they will check if array is empty/not
  a.setCheck(true);

  do{
    printmenu();

    cin >> menuChoice;

    switch(menuChoice){
      case 1: {
        a.generateArray();
        cout << endl << endl;
      }
      continue;

      case 2:{
        if(a.isEmpty()){
        cout << "Array is empty."<< endl;
      }

        else{
          a.display();
        }
      }  
      continue;

      case 3:{
        if(a.isEmpty()){
         cout << "Array is empty."<< endl;
         cout << endl;
        }
        else{
          cout << "\n\nThe sum of random array: "<< a.getSum() << endl;
        }
      }
      continue;

      case 4: {
        if(a.isEmpty()){
          cout << "Array is empty."<< endl;
        }
        else{
          cout <<"\nThe average of the array is"<< a.getAverage() <<"."<< endl;
        }  
      }   
  
      continue;
  
      case 5:{
        if(a.isEmpty()){
          cout << "Array is empty."<< endl;
          cout << endl;
        }
        else{
          cout<<"\n\nEnter number you want to search:";
          cin>>search_var;

          //timer for this algorithm
          index = a.binarySearch(search_var);
          //Checking index value
          if(index == -1){
            cout << "\nElement not found. \n";
          }
          else{
            cout<<"\nElement " << search_var << " found at index position: " << index<<endl;
          }
          cout << endl;
        }
      }
      continue;

      case 6:{
        cout << endl;
        endPrint();
        return 1;
        break;
      }

      default:{
        cout << endl;
        defaultPrint();
      }
      continue;

    }

  }

while(menuChoice!=6);
return 0;

}

void printmenu(){
  cout << "\n   ~ M E N U ~   \n" << endl;
  cout << "1. Fill the Array"<<endl;
  cout << "2. Print Random Array"<<endl;
  cout << "3. Print Sum of Array"<<endl;
  cout << "4. Print Average of Array"<<endl;
  cout << "5. Binary Search"<<endl;
  cout << "6. Exit"<<endl;
  cout << "Enter your choice: " ;
}

void endPrint(){
  cout <<"\n****Goodbye!****\n";
}

void defaultPrint(){
  cout <<"Please select a valid choice"<<endl;
}  
